# -*- mode: ruby -*-
# vi: set ft=ruby :

$num_nodes = 4
$ips = ["192.168.0.50", "192.168.0.51", "192.168.0.52", "192.168.0.53", "192.168.0.54", ]
$iface = "enp0s25"
$registry_ip = "192.168.0.4"
$master_ip = $ips[0]

$provision = <<-SCRIPT

OS=xUbuntu_20.04
CRIO_VER=1.20
KUBE_VER=1.20.5-00

apt-get update -q
apt-get -q -y install software-properties-common mc zile apt-transport-https curl

echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VER/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VER.list
curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VER/$OS/Release.key | apt-key add -
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -
apt-get update -q
apt-get install -q -y cri-o cri-o-runc
cat << CRIOCONF >> /etc/crio/crio.conf
registries = [
 	"quay.io",
	"docker.io",
]
insecure_registries = [
"my-registry",
]
CRIOCONF
systemctl stop crio
systemctl start crio
systemctl enable crio

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update -q
apt-get install -q -y kubelet=$KUBE_VER kubeadm=$KUBE_VER kubectl=$KUBE_VER

echo 'KUBELET_EXTRA_ARGS="--node-ip=%{ip} --container-runtime=remote --container-runtime-endpoint=/var/run/crio/crio.sock --cgroup-driver=systemd"' > /etc/default/kubelet
systemctl daemon-reload

SCRIPT

$master_provision = <<-SCRIPT
kubeadm init --cri-socket='unix:///run/crio/crio.sock' --token=abcdef.0123456789abcdef --token-ttl=0 --pod-network-cidr=10.10.0.0/16 --apiserver-advertise-address=%{master_ip}
cp /etc/kubernetes/admin.conf /vagrant/
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null |    openssl dgst -sha256 -hex | sed 's/^.* //' > /vagrant/CA-sha
SCRIPT

$node_provision = <<-SCRIPT
kubeadm join %{master_ip}:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:$(cat /vagrant/CA-sha)
SCRIPT

$bridge = <<-SCRIPT
modprobe overlay
modprobe br_netfilter
cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
sysctl --system
SCRIPT

$hosts = <<-SCRIPT
cat > /etc/hosts <<EOF
127.0.0.1	localhost

# The following lines are desirable for IPv6 capable hosts
::1	ip6-localhost	ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
ff02::3	ip6-allhosts

%{registry}	my-registry
%{ip}	%{hostname}
EOF
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end

  config.vm.define "master" do |master|
    ip = $ips[0]
    hostname = "master"
    master.vm.network "public_network", ip: ip, bridge: $iface
    master.vm.hostname = hostname
    p = $provision + $master_provision
    p = p.% ip:ip, registry:$registry_ip, master_ip:$master_ip
    master.vm.provision "shell", inline: $bridge, run: 'always'
    hosts_provision = $hosts.% ip:ip, hostname:hostname, registry:$registry_ip
    master.vm.provision "shell", inline: hosts_provision, run: 'always'
    master.vm.provision "shell", inline: p
  end

  (1..$num_nodes).each do |i|
    config.vm.define "node#{i}" do |node|
      ip = $ips[i]
      hostname= "node#{i}"
      node.vm.network "public_network", ip: ip, bridge: $iface
      node.vm.hostname = hostname
      p = $provision + $node_provision
      p = p.% ip:ip, registry:$registry_ip, master_ip:$master_ip
      node.vm.provision "shell", inline: $bridge, run: 'always'
      hosts_provision = $hosts.% ip:ip, hostname:hostname, registry:$registry_ip
      node.vm.provision "shell", inline: hosts_provision, run: 'always'
      node.vm.provision "shell", inline: p
    end
  end
end
